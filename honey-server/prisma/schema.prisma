// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  email     String
  username  String
  picture   String?
  handle    String?  @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tokens        Token[]
  socialAccount SocialAccount?
  Recipe        Recipe[]

  @@map("users")
}

model SocialAccount {
  id     Int @id @default(autoincrement())
  userId Int @unique @map("user_id")

  provider  String
  socialId  String   @map("social_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_accounts")
}

model Token {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")

  counter    Int      @default(1)
  invalidate Boolean  @default(false)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tokens")
}

model Recipe {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")

  title       String
  description String
  thumbnail   String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  recipeCourse RecipeCourse[]
  recipeStat   RecipeStat?

  @@map("recipes")
}

model RecipeStat {
  id       Int @id @default(autoincrement())
  recipeId Int @unique @map("recipe_id")

  likeCount    Int      @default(0) @map("like_count")
  commentCount Int      @default(0) @map("comment_count")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_stats")
}

model RecipeCourse {
  id       Int @id @default(autoincrement())
  recipeId Int @map("recipe_id")

  order     Int
  title     String
  content   String
  picture   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("recipe_courses")
}
